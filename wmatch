//
// NAME
//    catbyline - example of simple cat to display files
//
// SYNOPSIS
//    catbyline [filename...]
//
// DESCRIPTION
//    Uses fgets to read lines from files and prints to stdout.
//    If no filenames are specified, reads stdin.  Does not consider
//    whether input buffer is too short.
//


#define _GNU_SOURCE
#include <errno.h>
#include <libgen.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <unistd.h>


char *program_name = NULL;
char *comparator = NULL;
int exit_status = EXIT_SUCCESS;
#define STDIN_NAME "-"

struct options {
   bool ignore_case;
   bool filenames_only;
   bool number_lines;
};
struct options opts;
 
void scanOpts (int argc, char **argv, struct  options *opts) {
   opts->ignore_case = false;
   opts->filenames_only = false;
   opts->number_lines = false;
   opterr = false;
   for (;;) {
      int opt = getopt(argc, argv, "iln");
      if (opt == EOF) break;
      switch (opt) {
         case 'i':
            opts->ignore_case = true;
            printf("ignore case true\n");
            break;
         case 'l':
            opts->filenames_only = true;
            printf("filenames only true\n");
             break;
         case 'n':
            opts->number_lines = true;
            printf("number lines true\n");
             break;
         default:
            exit_status = EXIT_FAILURE;
            fflush(NULL);
            fprintf(stderr, "%s: -%c: invalid option\n", 
                                   program_name, optopt);
                                   // optopt is an error character
            break;
      }  
   }
}


void catbyline (FILE *input, struct options *opts) {
   char buffer[1024];
   int linenr = 0;
   for (;;) {
      ++linenr;
      char *buf = fgets (buffer, sizeof buffer, input);
      if (buf == NULL) break;
      if (comparator == NULL) break;
      char *ptr;
      if (opts->ignore_case == false) {
          ptr = strstr(buffer, comparator);
      }else if (opts->ignore_case == true) { 
         ptr = strcasestr(buffer, comparator);
      }
//      printf("%d\n", opts->filenames_only);
      if (opts->filenames_only == false){
         if (ptr != NULL) {
            printf("%d: ", linenr);
            fputs(buffer, stdout);
         }
      }
   }
}


int main (int argc, char **argv) {
   program_name = basename(argv[0]);
      scanOpts(argc, argv, &opts);
      program_name = basename(argv[0]);
      for (int argi = optind + 1; argi < argc; ++argi) {
         comparator = argv[optind];
         char *filename = argv[argi];
         if (strcmp (filename, STDIN_NAME) == 0) {
            catbyline(stdin, &opts);       // no stdin implementation
         }else {
            FILE *input = fopen(filename, "r");
            if (input != NULL) {
               catbyline(input, &opts);
               fclose(input);
            }else {
               exit_status = EXIT_FAILURE;
               fflush(NULL);
               fprintf(stderr, "%s: %s: %s\n", program_name,
                       filename, strerror (errno));
               fflush(NULL);
            }
         }
      }   
   return exit_status;
}



